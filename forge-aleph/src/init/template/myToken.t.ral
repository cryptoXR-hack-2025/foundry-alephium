Contract TestContract(
  symbol: ByteVec,
  name: ByteVec,
  decimals: U256,
  initialSupply: U256,
) {

  let (encodedImmFields, encodedMutFields) = TokenFaucet.encodeFields!(symbol,name,  decimals, initialSupply, initialSupply)
  let deployed_id = createContract!{caller -> ALPH:1 alph}(fooBytecode, encodedImmFields, encodedMutFields)

  // A public function that returns the current balance of the contract.
  pub fn testSupply() -> Bool {
    let supply = TokenFaucet(deployed_id).getTotalSupply()
    assert!(supply == 1e18)
  }
}

TxScript Deploy(testBytecode:ByteVec,caller:Address) {
  // Token contract parameters
  let symbol = b`RALPH`
  let name = b`Ralph token`
  let decimals = 10
  let initialSupply = 1e18

  // Deploy contracts
  let (encodedImmFields, encodedMutFields) = TestContract.encodeFields!(symbol,name,  decimals, initialSupply)
  let test_id = createContract!{caller -> ALPH:1 alph}(testBytecode, encodedImmFields, encodedMutFields)

  // Debug data about deployed contracts
  emit Debug(`TestContract deployed at ${test_id} id`)
  emit Debug(`Function available is testSupply`)
}